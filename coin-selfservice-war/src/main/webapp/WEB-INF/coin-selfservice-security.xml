<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2012 SURFnet bv, The Netherlands

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:opensaml="http://www.surfnet.nl/schema/security/opensaml"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd
       http://www.surfnet.nl/schema/security/opensaml
       http://www.surfnet.nl/schema/security/spring-security-opensaml.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

  <bean id="samlProvisioner" class="nl.surfnet.coin.selfservice.provisioner.SAMLProvisioner">
    <property name="uuidAttribute" value="${saml-uuid-attribute}"/>
  </bean>

  <bean id="apiOauthFilter" class="nl.surfnet.coin.selfservice.filter.ApiOAuthFilter">
    <property name="adminLicentieIdPTeam" value="${admin.licentie.idp.teamname}" />
    <property name="adminSurfConextIdPTeam" value="${admin.surfconext.idp.teamname}" />
    <property name="adminDistributionTeam" value="${admin.distribution.channel.teamname}" />
    <property name="apiClient" ref="openConextApiClient" />
    <property name="callbackFlagParameter" value="apiOauthCallback" />
    <property name="crmAvailable" value="${feature.crm_active:false}"/>
  </bean>

  <bean id="sabEntitlementsFilter" class="nl.surfnet.coin.selfservice.filter.SabEntitlementsFilter">
    <property name="adminDistributionRole" value="${admin.distribution.channel.sabRole}" />
    <property name="adminLicentieIdPRole" value="${admin.licentie.idp.sabRole}" />
    <property name="adminSurfConextIdPRole" value="${admin.surfconext.idp.sabRole}" />
    <property name="viewerSurfConextIdPRole" value="${viewer.surfconext.idp.sabRole}" />
    <property name="crmAvailable" value="${feature.crm_active:false}" />
  </bean>

  <!-- this will be either the real SabClient or a Mock -->
  <bean id="sabClient" class="${sabClientClass}" />

  <bean class="nl.surfnet.sab.HttpClientTransport">
    <property name="sabEndpoint" value="${sab.endpoint}" />
    <property name="username" value="${sab.username}" />
    <property name="password" value="${sab.password}" />
  </bean>

  <bean id="samlCertificateStore" class="nl.surfnet.spring.security.opensaml.KeyStore">
    <property name="certificates">
      <map>
        <entry key="${wayf.url.metadata}" value="${wayf.certificate}"/>
      </map>
    </property>
  </bean>

  <opensaml:service-provider id="samlAuthenticationProvider"
                             message-handler-ref="samlMessageHandler"
                             preauth-filter-ref="samlPreAuthFilter"
                             entity-id="${ISSUING_ENTITY_ID}"
                             assertion-consumer-uri="${ASSERTION_CONSUMER_URI}"
                             provisioner-ref="samlProvisioner"
                             certificatestore-ref="samlCertificateStore"
                             authentication-manager-ref="authenticationManager"/>

  <security:http auto-config="true" use-expressions="true" disable-url-rewriting="true">

    <security:custom-filter position="PRE_AUTH_FILTER" ref="samlPreAuthFilter"/>
    <security:custom-filter after="PRE_AUTH_FILTER" ref="apiOauthFilter"/>
    <security:custom-filter after="ANONYMOUS_FILTER" ref="sabEntitlementsFilter"/>
    <security:intercept-url pattern="/OpenSAML.sso/Login" access="permitAll"/>
    <security:intercept-url pattern="/OpenSAML.sso/Metadata" access="permitAll"/>
    <security:intercept-url pattern="/logout.shtml" access="permitAll"/>
    <security:intercept-url pattern="${ASSERTION_CONSUMER_URI}"
                               access="hasAnyRole('ROLE_ANONYMOUS','ROLE_IDP_SURFCONEXT_ADMIN', 'ROLE_IDP_LICENSE_ADMIN', 'ROLE_DISTRIBUTION_CHANNEL_ADMIN', 'ROLE_USER')"/>

    <security:intercept-url pattern="/css/**" access="permitAll"/>
    <security:intercept-url pattern="/font/**" access="permitAll"/>
    <security:intercept-url pattern="/images/**" access="permitAll"/>
    <security:intercept-url pattern="/public/**" access="permitAll"/>
    <security:intercept-url pattern="/fieldimages/**" access="permitAll"/>
    <security:intercept-url pattern="/js/**" access="permitAll"/>
    <security:intercept-url pattern="/*.ico" access="permitAll"/>
    <security:intercept-url pattern="/stats/**" access="hasAnyRole('ROLE_DISTRIBUTION_CHANNEL_ADMIN','ROLE_IDP_SURFCONEXT_ADMIN', 'ROLE_IDP_LICENSE_ADMIN')"/>
    <security:intercept-url pattern="/requests/**" access="hasAnyRole('ROLE_DISTRIBUTION_CHANNEL_ADMIN','ROLE_IDP_SURFCONEXT_ADMIN', 'ROLE_IDP_LICENSE_ADMIN')"/>
    <security:intercept-url pattern="/notifications/**" access="hasAnyRole('ROLE_IDP_SURFCONEXT_ADMIN', 'ROLE_IDP_LICENSE_ADMIN')"/>
    <security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_IDP_SURFCONEXT_ADMIN', 'ROLE_IDP_LICENSE_ADMIN', 'ROLE_DISTRIBUTION_CHANNEL_ADMIN')"/>

    <security:form-login login-page="/OpenSAML.sso/Login?target=${wayf.url.sso}" default-target-url="/" />
    <security:anonymous/>
    <security:logout logout-success-url="/logout.shtml" invalidate-session="true" delete-cookies="true"/>
  </security:http>

  <security:authentication-manager alias="authenticationManager">
    <security:authentication-provider ref="samlAuthenticationProvider"/>
  </security:authentication-manager>
</beans>